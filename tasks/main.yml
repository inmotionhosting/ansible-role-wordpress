---
#
# Setup
#

- name: Include variables and set facts
  ansible.builtin.include_tasks: facts.yml

- name: Create the system user group
  ansible.builtin.group:
    name: "{{ system_user }}"
    state: present

- name: Create the system user account
  ansible.builtin.user:
    name: "{{ system_user }}"
    group: "{{ system_user }}"
    groups: "{{ system_user }},nginx,nobody,redis"

- name: Ensure install directory exists
  ansible.builtin.file:
    path: "{{ wp_system_path }}"
    state: directory
    owner: "{{ system_user }}"
    group: "{{ system_user }}"
    mode: "0755"

- name: Ensure system user home has execute permissions
  ansible.builtin.file:
    path: "/home/{{ system_user }}"
    mode: "0711"

- name: Create the system user ~/logs directory
  ansible.builtin.file:
    path: "/home/{{ system_user }}/logs"
    mode: "0755"
    owner: "{{ system_user }}"
    group: "{{ system_user }}"
    state: directory

#
# Apache
#

- name: Include Debian-family tasks
  ansible.builtin.include_tasks: Debian.yml
  when: ansible_os_family|lower == "debian"

- name: Create httpd virtual host
  ansible.builtin.template:
    src: etc/httpd/conf.d/site.conf.j2
    dest: "{{ apache_config_site_path }}/{{ site_domain }}.conf"
    owner: root
    group: root
    mode: "0644"
  notify: Restart apache

- name: Identify extra site configs
  ansible.builtin.find:
    paths: "{{ apache_config_site_path }}"
    file_type: file
    contains: '.*site\.conf\.j2.*'
    excludes: "{{ site_domain }}.conf"
  register: apache_extra_sites

- name: Remove extra site configs
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ apache_extra_sites.files }}"
  notify: Restart apache

- name: Check syntax for "{{ apache_daemon }}"
  ansible.builtin.command: "{{ apache_daemon }} -t"
  register: apache_syntax
  changed_when: false
  ignore_errors: true

#
# PHP
#

- name: Place site-specific php-fpm config
  ansible.builtin.template:
    src: etc/php-fpm.d/site.conf.j2
    dest: "{{ php_fpm_config_pool_path }}/{{ site_domain }}.conf"
    owner: root
    group: root
    mode: "0644"
  notify: Restart php-fpm

- name: Remove default www pool
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/php/7.0/fpm/pool.d/www.conf
    - /etc/php-fpm.d/www.conf
  notify: Restart php-fpm

- name: Identify extra fpm pool configs
  ansible.builtin.find:
    paths: "{{ php_fpm_config_pool_path }}"
    file_type: file
    contains: '.*site\.conf\.j2.*'
    excludes: "{{ site_domain }}.conf"
  register: php_fpm_extra_pools

- name: Remove extra site configs
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ php_fpm_extra_pools.files }}"
  notify: Restart php-fpm

- name: Check if local php.ini exists
  ansible.builtin.stat:
    path: "{{ wp_system_path }}/php.ini"
  register: php_ini_result

- name: Create local php.ini
  ansible.builtin.copy:
    dest: "{{ wp_system_path }}/php.ini"
    content: |
      [PHP]
      ;display_errors = Off
      ;display_startup_errors = Off
      ;error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
      ;log_errors = On
      ;max_execution_time = 30
      ;max_input_time = 60
      ;max_input_vars = 1000
      ;memory_limit = 128M
      ;post_max_size = 8M
      ;upload_max_filesize = 2M
    owner: "{{ system_user }}"
    group: "{{ system_user }}"
    mode: "0644"
  when: not php_ini_result.stat.exists

- name: Check syntax for "{{ php_fpm_daemon }}"
  ansible.builtin.command: "{{ php_fpm_daemon }} -t"
  register: phpfpm_syntax
  changed_when: false
  ignore_errors: true

#
# NGINX
#

- name: Load in profile variables for selected nginx cache profile
  ansible.builtin.include_vars:
    file: vars/nginx_cache_profiles/{{ nginx_cache_profile }}.yml
  tags: profile
  when: nginx_cache_profile is defined

- name: Configure upstream server groups
  ansible.builtin.template:
    src: etc/nginx/conf.d/upstream.conf.j2
    dest: /etc/nginx/conf.d/upstream.conf
    owner: root
    group: root
    mode: "0644"
  notify: Restart nginx

- name: Configure site-specific NGINX proxy
  ansible.builtin.template:
    src: etc/nginx/conf.d/site.conf.j2
    dest: /etc/nginx/conf.d/{{ site_domain }}.conf
    owner: root
    group: root
    mode: "0644"
  notify: Restart nginx
  tags: profile

- name: Configure NGINX VTS module
  ansible.builtin.template:
    src: etc/nginx/conf.d/status.conf.j2
    dest: /etc/nginx/conf.d/status.conf
    owner: root
    group: root
    mode: "0644"
  notify: Restart nginx
  when:
    - nginx_vts_enable is defined
    - nginx_vts_enable

- name: Identify extra site configs
  ansible.builtin.find:
    paths: /etc/nginx/conf.d
    file_type: file
    contains: '.*site\.conf\.j2.*'
    excludes: "{{ site_domain }}.conf"
  register: nginx_extra_sites

- name: Remove extra site configs
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ nginx_extra_sites.files }}"
  notify: Restart nginx

- name: Check syntax for "{{ nginx_daemon }}""
  ansible.builtin.command: "{{ nginx_daemon}} -t"
  register: nginx_syntax
  changed_when: false
  ignore_errors: true
  tags: profile

#
# WordPress
#
- name: Check for, Install, and Configure WordPress
  when: install_wordpress | bool
  block:
    - name: Check for existing WordPress installation
      ansible.builtin.stat:
        path: "{{ wp_system_path }}/wp-config.php"
      register: wp_config

    - name: Install WordPress
      ansible.builtin.include_tasks: wordpress.yml
      when: not wp_config.stat.exists

    - name: Get WordPress Site Url
      ansible.builtin.command: >-
        wp option get siteurl --skip-plugins --skip-themes
      args:
        chdir: "{{ wp_system_path }}"
      become: true
      become_user: "{{ system_user }}"
      register: siteurl
      changed_when: false

    - name: Replace all site urls in database if changed
      ansible.builtin.command: >-
        wp search-replace "{{ siteurl.stdout }}" "{{ wp_protocol }}{{ site_domain }}" --skip-plugins --skip-themes
      args:
        chdir: "{{ wp_system_path }}"
      become: true
      become_user: "{{ system_user }}"
      changed_when: false
      when: siteurl.stdout is defined and siteurl.stdout != wp_protocol + site_domain
      vars:
        wp_protocol: >-
          {{ "https://"
          if use_letsencrypt is defined
          and use_letsencrypt | bool
          else "http://" }}
      register: search_replace

    - name: Flush WordPress persistent object cache
      ansible.builtin.command: >-
        wp cache flush
      args:
        chdir: "{{ wp_system_path }}"
      become: true
      become_user: "{{ system_user }}"
      changed_when: false
      when: "'skipped' not in search_replace"

    - name: Ensure WordPress siteurl and homeurl are correct
      ansible.builtin.command: >-
        wp option set {{ item }} "{{ wp_protocol }}{{ site_domain }}" --skip-plugins --skip-themes
      args:
        chdir: "{{ wp_system_path }}"
      become: true
      become_user: "{{ system_user }}"
      changed_when: false
      vars:
        wp_protocol: >-
          {{ "https://"
          if use_letsencrypt is defined
          and use_letsencrypt | bool
          else "http://" }}
      with_items:
        - siteurl
        - home

    - name: Check current value of RT_WP_NGINX_HELPER_CACHE_PATH
      ansible.builtin.command: >-
        wp config get RT_WP_NGINX_HELPER_CACHE_PATH --skip-plugins --skip-themes
      args:
        chdir: "{{ wp_system_path }}"
      become: true
      become_user: "{{ system_user }}"
      register: nginx_helper_cache_path
      changed_when: false
      failed_when: false

    - name: Ensure NGINX Helper Cache Path is correct
      ansible.builtin.command: >-
        wp config set RT_WP_NGINX_HELPER_CACHE_PATH "{{ nginx_cache_path }}" --skip-plugins --skip-themes
      args:
        chdir: "{{ wp_system_path }}"
      become: true
      become_user: "{{ system_user }}"
      changed_when: false
      when: nginx_helper_cache_path.stdout != nginx_cache_path
      vars:
        nginx_cache_path: "{{ nginx_cache_dir }}/{{ nginx_cache_name }}"

#
# SELinux
#

- name: Enable and configure SELinux
  ansible.builtin.include_tasks: selinux.yml
  when: ansible_selinux.status == "enabled"
